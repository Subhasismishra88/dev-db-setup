- name: Download MySQL Community Repo
  get_url:
    url: http://repo.mysql.com/mysql-community-release-el7-7.noarch.rpm
    dest: /tmp

- name: install mysql
  yum:
    name: /tmp/mysql-community-release-el7-7.noarch.rpm
    state: present

- name: Install MySQL Server
  yum:
    name: mysql-server
    state: present

- name: install-mysql
  yum:
    name: MySQL-python
    state: present

- name: configure mysql parameters in my.cnf
  template:
    src: my.cnf.j2
    dest: "/etc/{{ mysqldb_name }}.cnf"
    owner: root
    group: root
    mode: 644

- name: addd mysql startup script
  template:
    src: mysqld.service.j2
    dest: "/usr/lib/systemd/system/mysql-{{ mysqldb_name }}.service"
    owner: root
    group: root
    mode: 644

- name: create mysql-db data directory
  file:
    path: "{{item}}"
    state: directory
    owner: mysql
    group: mysql
    mode: 0755
  with_items:
  - "{{ mysqldb_data_dir }}"
  - "/var/log/{{ mysqldb_name }}"

- stat:
    path: /opt/{{ mysqldb_name }}.installed
  register: installation_status

- name: setup mysql db
  command: mysql_install_db --user=mysql --datadir={{ mysqldb_data_dir }}
  when: installation_status.stat.exists == False

- name: selinux settings for mysql datadir
  command: semanage fcontext -a -t mysqld_db_t '{{ mysqldb_data_dir }}(/.*)?'
  when: installation_status.stat.exists == False

- name: restorecon command
  command: restorecon -Rv '{{ mysqldb_data_dir }}'
  when: installation_status.stat.exists == False

- name: Start MySQL Server and enable it
  service:
    name: "mysql-{{ mysqldb_name }}"
    state: started
    daemon_reload: yes
    #enabled: yes

- stat:
    path: /opt/{{ mysqldb_name }}.installed
  register: installation_status

- name: Remove Test database if it exist.
  mysql_db:
    name: test
    state: absent
    login_host: 127.0.0.1
    login_port: "{{ mysqldb_port }}"
  when: installation_status.stat.exists == False

- name: Remove All Anonymous User Accounts
  mysql_user:
    name: ''
    host_all: yes
    login_host: 127.0.0.1
    login_port: "{{ mysqldb_port }}"
    state: absent
  when: installation_status.stat.exists == False

- name: Change root password
  mysql_user: 
    name: root 
    host: "{{item}}"
    password: "{{ mysqldb_root_password }}"
    login_host: 127.0.0.1
    login_port: "{{ mysqldb_port }}"
  with_items:
  - "{{ansible_hostname}}"
  - 127.0.0.1
  - ::1
  - localhost
  when: installation_status.stat.exists == False

- name: create database
  mysql_db:
    name: "{{ mysqldb_name }}"
    login_user: root
    login_password: "{{ mysqldb_root_password }}"
    login_host: 127.0.0.1
    login_port: "{{ mysqldb_port }}"
    state: present
  when: installation_status.stat.exists == False

- name: add mysql user and assign permission
  mysql_user:
    name: "{{ mysqldb_user_name }}"
    password: "{{ mysqldb_user_password }}"
    login_user: root
    login_password: "{{ mysqldb_root_password }}"
    login_host: 127.0.0.1
    login_port: "{{ mysqldb_port }}"
    priv: "{{ mysqldb_name }}.*:ALL"
    state: present
  when: installation_status.stat.exists == False

- name: create file if all above installation steps succeeded
  file:
    path: "/opt/{{ mysqldb_name }}.installed"
    state: touch

- name: create backup directory if not exists
  file:
    path: /opt/backups/
    state: directory

- name: download file from gcp storage
  gc_storage:
    bucket: "{{ backup_bucket_name }}"
    object: "{{ mysqldb_name }}/{{ mysqldb_name }}-{{ backup_date }}.sql.gz"
    dest: "/opt/backups/{{ mysqldb_name }}-{{ backup_date }}.sql.gz"
    mode: get
    gs_access_key: "{{ lookup('env', 'GS_ACCESS_KEY_ID') }}"
    gs_secret_key: "{{ lookup('env', 'GS_SECRET_ACCESS_KEY') }}"

- name: extract tge data dump
  command: gunzip "/opt/backups/{{ mysqldb_name }}-{{ backup_date }}.sql.gz"
  args:
    creates: "/opt/backups/{{ mysqldb_name }}-{{ backup_date }}.sql"

- name: source mysql database
  mysql_db:
    name: "{{ mysqldb_name }}"
    login_user: "{{ mysqldb_user_name }}"
    login_password: "{{ mysqldb_user_password }}"
    login_host: 127.0.0.1
    login_port: "{{ mysqldb_port }}"
    state: import
    target: "/opt/backups/{{ mysqldb_name }}-{{ backup_date }}.sql"

#- name: copy message db dump into server
#  copy:
#    src: dump_messagedb.sql
#    dest: /opt/backups

#- name: source messagedb
#  mysql_db:
#    name: "{{ msg_db_name }}"
#    login_user: "{{ msg_user_name }}"
#    login_password: "{{ msg_user_password }}"
#    state: import
#    target: /opt/backups/dump_messagedb.sql

#- name: copy balance db dump into server
#  copy:
#    src: uat_kryptonobalancedb.sql
#    dest: /opt/backups

#- name: source balance db
#  mysql_db:
#    name: "{{ balance_db_name }}"
#    login_user: "{{ balance_user_name }}"
#    login_password: "{{ balance_user_password }}"
#    state: import
#    target: /opt/backups/uat_kryptonobalancedb.sql
